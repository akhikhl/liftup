buildscript {

  repositories {
    mavenLocal()
    mavenCentral()
  }

  dependencies {
    classpath "commons-io:commons-io:2.4"
    classpath "org.apache.maven:maven-ant-tasks:2.1.3"
    classpath "de.northernideas:osgi2maven:1.0.1"
    classpath "startext.hermes.build:setupHelpers:0.0.1"
    classpath "startext.hermes-rcp.buildTools:osarch:0.0.1"
  }
}

apply plugin: "osarch"
apply from: "../eclipseConfig.gradle"

import org.apache.commons.io.*;
import setuphelpers.*
import osgi2maven.mavenExport.MavenDeployer;

def deployEclipseArtifactsInFolder(artifactsSourceDir, repository, user, password) {
  File mavenAntTasksJar = buildscript.configurations.classpath.find { it.name.contains("maven-ant-tasks") }
  MavenDeployer deployer = new MavenDeployer(repository, user, password, mavenAntTasksJar);
  File[] files = artifactsSourceDir.listFiles({ File f -> f.isDirectory() } as FileFilter)
  if(files != null)
    for(File file : files)
      deployer.publishOsgiArtifact(eclipseGroup, file)
  files = artifactsSourceDir.listFiles({ File f -> f.isFile() && f.getName().endsWith(".jar") } as FileFilter)
  if(files != null)
    for(File file : files)
      deployer.publishOsgiArtifact(eclipseGroup, file)
}

task build {
  File markerFile = new File(buildDir, "eclipseDownloaded")
  inputs.property "swt_version", swt_version
  inputs.property "jface_version", jface_version
  inputs.property "swt_lang_version", swt_lang_version
  inputs.property "eclipseDownload_main", eclipseDownload_main
  inputs.property "eclipseDownload_deltaPack", eclipseDownload_deltaPack
  inputs.property "eclipseDownload_languagePack", eclipseDownload_languagePack
  outputs.file markerFile
  doLast {
    buildDir.mkdirs()
    for(url in eclipseURLs) {
      String fileName = url.substring(url.lastIndexOf('/') + 1)
      String fileNameNoExt = fileName;
      for(ext in [ ".tar.gz", ".gz", ".tar", ".zip" ]) {
        if(fileName.endsWith(ext)) {
          fileNameNoExt = fileName.substring(0, fileName.length() - ext.length());
          break;
        }
      }
      File unpackDir = new File(buildDir, fileNameNoExt)
      if(!unpackDir.exists()) {
        File archiveFile = new File(buildDir, fileName)
        Download.downloadFile(new URL(url), archiveFile)
        Archive.unpack(archiveFile, buildDir)
        new File(buildDir, "eclipse").renameTo(unpackDir)
      }
    }
    markerFile.text = new java.util.Date()
  }
}

task install {
  inputs.file new File(buildDir, "eclipseDownloaded")
  File outputMarkerFile = new File(buildDir, "eclipseArtifactsInstalled")
  outputs.file outputMarkerFile
  doLast {
    for(url in eclipseURLs) {
      String fileName = url.substring(url.lastIndexOf('/') + 1)
      String fileNameNoExt = fileName;
      for(ext in [ ".tar.gz", ".gz", ".tar", ".zip" ]) {
        if(fileName.endsWith(ext)) {
          fileNameNoExt = fileName.substring(0, fileName.length() - ext.length());
          break;
        }
      }
      File unpackDir = new File(buildDir, fileNameNoExt)
      deployEclipseArtifactsInFolder(new File(unpackDir, "plugins"), null, "", "")
    }
    outputMarkerFile.text = new java.util.Date()
  }
}

install.dependsOn build

/*task clean << {
  File buildDir = getEclipseFolder()
  if(buildDir.exists()) {
    println "Eclipse folder $buildDir exists, removing"
    FileUtils.deleteDirectory(buildDir);
  }
}*/

defaultTasks "install"
